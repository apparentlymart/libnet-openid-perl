<?page
wintitle=>an actually distributed identity system
body<=

<h2>What</h2>

<p>This is a decentralized identity system, but one that's actually decentralized and doesn't entirely crumble if one company turns evil or goes out of business.</p>

<p><b>An OpenID identity is just a URL</b>.  You can have multiple identities in the same way you can have multiple URLs.  All OpenID does is provide a way to <b>prove that you own a URL (identity)</b>.  And it does this without passing around your password, your email address, or anything you don't want it to.  There's no profile exchange component at all:  your profiile is your identity URL, but recipients of your identity can then learn more about you from any public, semantically interesting documents linked thereunder (FOAF, RSS, Atom, vCARD, etc.).

<p>Anybody can run their own site using OpenID, and anybody can be an OpenID server, and they all work with each other without having to register with or pay anybody to "get started".  An owner of a URL can pick which OpenID server to use.</p>

<p>While nothing in the protocol requires JavaScript or modern browsers, the authentication scheme plays nicely with "AJAX"-style setups, so you can prove your identity to a site without bouncing between pages.</p>

<h2>Why?</h2>

<ul class='spaced'>
<li>A lot of other distributed identity systems aren't actually distributed, having one or more parts centrally controlled.</li>
<li>Logging in to a dozen websites every day is lame.</li>
<li>Sites that let you enter your name/URL/email/etc and show it without verifying you're you are lame.</li>
<li>You should be able to keep one (or more) identities over time that stay fixed, regardless of what services are still in existence and you still use a few years down the road.</li>
</ul>

<h2>How's it work?</h2>

<p>Here's the big picture:  (for details see <a href="specs.bml">the specs</a> or the <a href='pres/protocolflow-1.1.png'>authentication protocol flow diagram</a>)</p>


<ul class='spaced'>
<li>You maintain a blog at, say, <b>livejournal.com</b> (but this can be anything) and you stay logged in there usually.</li>

<li>You go to leave a comment at <b>someblog.com</b> (perhaps it's Movable Type, or Wordpress, or DeadJournal, ...) and you don't have an account there, so there's otherwise no way to leave an authenticated comment.  But if their blog-system has OpenID support, you see something like:  (but hopefully prettier)
<div style='margin: 1em 0 1em 2em; border-left: 2px solid black; padding-left: 1em;'>
<form onsubmit='return false;' action='get'>
<b>Login with your blog URL:</b> <input class='sexy' size='30' value="" /> <input type='button' value='Login' /><br />
<i>For example: <tt>happygirl.bloghost.com</tt></i>
</form>
</div>
</li>

<li>You type "brad.livejournal.com", click login, and then without leaving the page and destroying the comment you were working on typing, the someblog.com server does some work:
   <ul>
      <li>Looks at your blog, and finds your OpenID server.  You don't even know what OpenID is, but your publishing software did it all for you.</li>
      <li>The someblog.com server returns to your browser and tells it the OpenID identity server it found.</li>
   </ul>

</li>


<li>Then your browser contacts the identity server (see <a href="specs.bml">the details</a>) and one of two things happen....

    <ol>
     <li>If you've never told your homesite (LiveJournal in this case) that you trust this someblog.com site to know your identity, your homesite tells the page that (without revealing who you are) and the UI changes to something like this:  (the UI is left entirely to the sites wanting to confirm an OpenID identity)

<div style='margin: 1em 0 1em 2em; border-left: 2px solid black; padding-left: 1em;'>
<form onsubmit='return false;' action='get'>
<b>Login with your blog URL:</b> <input class='sexy' size='30' value="brad.livejournal.com" /> <input type='button' value='Login' /><br />
<b><span style='color: red'>Note:</span></b> You need to login to livejournal and/or mark this site as trusted for authentication to continue.  Your homesite, LiveJournal, says you can do that <a href="http://www.livejournal.com/login-and-or-setup-permissions" target='_blank'>here</a> [opens new window], then you can login again.
</form>
</div>
    </li>

     <li>Once you've told your homesite (your identity server, LiveJournal) that you trust this site you're visiting, everybody communicates behind the scenes to validate your identity, and you see perhaps:
<div style='margin: 1em 0 1em 2em; border-left: 2px solid black; padding-left: 1em;'>
<b>Hello, Brad!</b>  You're now logged in to someblog.com as <u>Brad from LiveJournal</u>.
</div>
     </li>
    </ol>
</li>

<li>Then you finish your comment, submit it, and the someblog.com server validates your identity behind the scenes, doing some mild crypto stuff explained <a href="specs.bml">in specs</a>.  If someblog.com is playing by the rules, nobody else can fake your identity.  Of course any site can lie, but what fun is a thousand people all saying they're Bill Gates, and message boards allowing it?  So respectable sites (where you'd hang out) would play by the rules.</li>

</ul>

<h2>Why not _______?</h2>

<ul class='spaced'>
<li><b>Passport</b> -- Centralized registry.  Not everybody trusts Microsoft to control their identity.</li>
<li><b>TypeKey</b> -- Centralized registry.  Not everybody trusts SixApart to control their identity.</li>
<li><b>Sxip 1.0</b> -- kinda distributed, but homesites have to register, and SPOF is the sxip.net DNS staying in existence.</li>
<li><b>Sxip 2.0</b> -- Based upon OpenID's protocol flow and then expanded, is actually cool technology.  Combines authentication and profile exchange in one spec, which increases the number of dependencies required for a site to implement,  though doesn't address exchanging generic "non-profile" data or pull use cases.  Working on incorporating parts of their changes back into OpenID Authentication.</li>
<li><b>SAML</b> -- We'd like to use the parts of SAML (from the Liberty Alliance) that are appropriate, but the spec as a whole isn't an answer.  Part of our OpenID requirements is that there's an AJAX version, which means the only type of RPC request we can do from the client to a remote host is a javascript or iframe'd request, and not everybody chooses to require SSL, which means the SAML bindings as-is won't work in that case, and we'll have to use our own JavaScript SAML wrapper at least in that case.</li>
<li><b>LID</b> -- Assumes that identity URLs are dynamic documents that can handle fancy URL parameters.  Not true in real life, which is key for adoption.  Also combines too much functionality (authentication + profile exchange) into one spec, which in turn increases the number of dependencies required for a site to implement LID (XPath, etc.)  We believe profile exchange should be a separate component/step built on top of authentication, not coupled with it.  We're working to incorporate parts of LID as one of our recommended profile exchange mechanisms in the future, but the spec as a whole was too heavy.</li>
</ul>

<h2>What about trust?</h2>

<p>This is <b>not</b> a trust system.  Trust requires identity first.</p>

<h2>What about spam?</h2>

<p>Again, this is not a trust system.</p>

<p>Somebody could run their own identity server that says they're http://spammer.example.com/000001/ all the way to http://spammer.example.com/999999/ and that's not a goal of this system to prevent.  It's another layer's job to say the identities with URL spammer.example.com/* is a spammer, or some ID server is a known spammer, or some particular identity is a known spammer.</p>

<p>What this does prevent is anybody but that spammer from using that identity URL.  While somebody else could make their ID server say that they're that http://spammer.example.com/000001/ URL, <i>a)</i> why would they?, and <i>b)</i> unless they also controlled the host spammer.example.com, they couldn't change the &lt;link rel=..&gt; tag to point to their rogue identity server.</p>

<h2>What about signing comments?</h2>

<p>This system doesn't sign comments.  If a rogue site says it's OpenID-enabled but actually isn't and claims to have posts from your identity, that doesn't mean anything.  This system isn't designed to prevent that.  The goal of this is for sites that do care about preventing spoofed comments/identities to be able to do so, if they play along.</p>

<p>After all, anybody could put up a geocities page right now that says anybody said anything.  Do you trust it just because you read it?</p>

<p>There are, however, some pretty obvious spots to insert comment signing into this scheme, so it's likely a future version of this spec will include that, with the identity server providing back a permalink/signature to the comment posted, so readers on some random site can go back to the origin to verify it.</p>

<h2>Who owns this?</h2>

<p>Nobody should own this.  Nobody's planning on making any money from this.  The goal is to release every part of this under the most liberal licenses possible, so there's no money or licensing or registering required to play.  It benefits the community as a whole if something like this exists, and we're all a part of the community.  If something like this already exists and I don't know about it, do let me know.  My goal isn't to reinvent the wheel... just find something that everybody can easily use.  <b>Update:</b>  Thanks for the pointers!  We've got at least two other people from similar projects on the mailing list, one of which was nearly identical to this system (<a href="http://www.downes.ca/idme.htm">mIDm</a>) and had a similar outlook:  he wanted something to just work, regardless of who made it, so he'll be helping us out.</p>

<=body
page?>
